# This workflow will create artifacts for all merges into master
# It will include linux, macos binaries with assets and an msi installer.

name: Artifacts
      
on:
 push:
   branches:
     - master
   paths:
     - "client/**"
     - "server/**"
     - "wix/**"
     - "rust-toolchain"
     - "Cargo.toml"
     # Also run if only CI has been modifed
     - ".github/workflows/**"
jobs:
  release-win:
    runs-on: [windows-latest]
    steps:
    - uses: actions/checkout@v2
    # Prepare toolchain
    - name: Pull toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
    # The current Airshipper version will be grabbed by running:
    # cd client && cargo pkgid | cut -d# -f2 | cut -d: -f2
    - name: Aquire Version
      id: vars
      shell: pwsh
      run: | 
        cd client 
        echo "::set-output name=version::$(cargo pkgid | ForEach-Object { $_.split(":")[3] })"
    - name: Print version
      run: echo "Airshipper v${{ steps.vars.outputs.version }}"
    # Cache
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    # Build & Package airshipper
    - name: Install cargo-wix
      run: cargo install cargo-wix
    - name: Build
      run: cargo build --bin airshipper --release     
    - name: MSI Installer
      run: cargo wix --no-build --nocapture -n client --install-version ${{ steps.vars.outputs.version }}
    - name: proper naming
      run: |
        Remove-Item â€“path airshipper-${{ steps.vars.outputs.version }}-x86_64.msi -ErrorAction Ignore
        ren target/wix/client-${{ steps.vars.outputs.version }}-x86_64.msi airshipper-${{ steps.vars.outputs.version }}-x86_64.msi
    # Upload artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: airshipper-windows-installer
        path: target/wix/airshipper-${{ steps.vars.outputs.version }}-x86_64.msi
  release-linux:
    runs-on: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
    # Prepare toolchain
    - name: Pull toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
    # Cache
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    # Build & Package airshipper
    - name: Build
      run: cargo build --bin airshipper --release
    - name: Package
      run: |
        mkdir -p artifact/
        mkdir -p artifact/assets/
        cp -r client/assets/** artifact/assets/
        cp target/release/airshipper artifact/airshipper
    # Upload artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: airshipper-linux
        path: artifact/
  release-macos:
    runs-on: [macos-latest]
    steps:
    - uses: actions/checkout@v2
    # Prepare toolchain
    - name: Pull toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
    # Cache
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    # Build & Package airshipper
    - name: Build
      run: cargo build --bin airshipper --release
    - name: Package
      run: |
        mkdir -p artifact/
        mkdir -p artifact/assets/
        cp -r client/assets/** artifact/assets/
        cp target/release/airshipper artifact/airshipper
    # Upload artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: airshipper-macos
        path: artifact/