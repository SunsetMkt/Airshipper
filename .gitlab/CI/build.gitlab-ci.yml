#linux, windows, macos builds here as template
.tlinux:
  image: registry.gitlab.com/veloren/veloren-docker-ci/base/linux-x86_64:${CACHE_IMAGE_TAG}
  script:
    - cargo build --release -p airshipper --all-features
    - cargo build --release -p airshipper-server --all-features
    - mv target/release/airshipper $CI_PROJECT_DIR
    - mv target/release/airshipper-server $CI_PROJECT_DIR
  artifacts:
    paths:
      - airshipper
      - airshipper-server
      - LICENSE
    expire_in: 1 week

.twindows:
  image: registry.gitlab.com/veloren/veloren-docker-ci/base/windows-x86_64:${CACHE_IMAGE_TAG}
  script:
    - cargo build --target=x86_64-pc-windows-gnu --release -p airshipper --all-features
    - chmod +x client/nsis/update_installer_version.sh
    - bash client/nsis/update_installer_version.sh
    - makensis client/nsis/installer.nsi
    - mv client/nsis/airshipper-windows.exe $CI_PROJECT_DIR
  artifacts:
    paths:
      - airshipper-windows.exe
    expire_in: 1 week

.tmacos:
  tags: ["veloren-macos"]
  before_script:
    - source $HOME/.cargo/env
    - cargo --version
    - export DISABLE_GIT_LFS_CHECK=true
    - export RUSTFLAGS="-D warnings"
  script:
    - export MACOSX_DEPLOYMENT_TARGET="10.13"
    - cargo build --release -p airshipper --all-features
    - cargo build --release -p airshipper-server --all-features
    - mv target/release/airshipper $CI_PROJECT_DIR
    - mv target/release/airshipper-server $CI_PROJECT_DIR
  artifacts:
    paths:
      - airshipper
      - airshipper-server
      - LICENSE
    expire_in: 1 week

.tmacos-aarch64:
  extends:
    - .tmacos
  before_script:
    - source $HOME/.cargo/env
    - export RUST_TARGET="aarch64-apple-darwin"

# Builds for release - all of these export their $CI_JOB_ID to a report artifact that
# is used by the gitlab_release step to include their artifacts in the resulting release
linux-x86_64:
  extends:
    - .tmastertag
    - .tlinux
  stage: build
  after_script:
    - echo LINUX_X86_64_JOB_ID=$CI_JOB_ID >> linux_x86_64_job_id.env
  artifacts:
    reports:
      dotenv: linux_x86_64_job_id.env
  tags: ["veloren/*", "build", "publish", "trusted"]

macos-x86_64:
  extends:
    - .tmastertag
    - .tmacos
  stage: build
  after_script:
    - echo MACOS_X86_64_JOB_ID=$CI_JOB_ID >> macos_x86_64_job_id.env
  artifacts:
    reports:
      dotenv: macos_x86_64_job_id.env
  tags: ["veloren/*:macos", "build", "publish", "trusted"]

macos-aarch64:
  extends:
    - .tmastertag
    - .tmacos-aarch64
  stage: build
  after_script:
    - echo MACOS_AARCH64_JOB_ID=$CI_JOB_ID >> macos_aarch64_job_id.env
  artifacts:
    reports:
      dotenv: macos_aarch64_job_id.env
  tags: ["veloren/*:macos", "build", "publish", "trusted"]

windows-x86_64:
  extends:
    - .tmastertag
    - .twindows
  stage: build
  after_script:
    - echo WINDOWS_JOB_ID=$CI_JOB_ID >> windows_job_id.env
  artifacts:
    reports:
      dotenv: windows_job_id.env
  tags: ["veloren/*", "build", "publish", "trusted"]

# Optional builds - these are in the check stage even though they're builds to allow building
# the output even if code quality checks fail
.tnon-master-optional:
  stage: check
  except:
    - master
  when: manual
  allow_failure: true

opt-linux-x86_64:
  extends:
    - .tlinux
    - .tnon-master-optional
  tags: ["veloren/*", "build"]

opt-macos-x86_64:
  extends:
    - .tmacos
    - .tnon-master-optional
  tags: ["veloren/*:macos", "build"]

opt-macos-aarch64:
  extends:
    - .tmacos-aarch64
    - .tnon-master-optional
  tags: ["veloren/*:macos", "build"]

opt-windows-x86_64:
  extends:
    - .twindows
    - .tnon-master-optional
  tags: ["veloren/*", "build"]
